#Y <- Sigma(rnorm(100), ncol = 4)
#canon(X[,1:2], Y[,3:4])
canon(X1, X2)
source("~/.active-rstudio-document", echo=TRUE)
#X <- Sigma(rnorm(100), ncol = 4)
#Y <- Sigma(rnorm(100), ncol = 4)
#canon(X[,1:2], Y[,3:4])
cancor(X1, X2)
cancor((Sigma[,1]), Sigma[,2])
head(Price)
summary(Price)
X <- Price[2:3]
Y <- Price[4:5]
print(Price.cc <- cc(X, Y))
library(CCA)
library(CCP)
X <- Price[2:3]
install.packages("CCA")
install.packages("CCP")
library(CCA)
library(CCP)
X <- Price[2:3]
Y <- Price[4:5]
print(Price.cc <- cc(X, Y))
n <- nrow(Price)
p <- ncol(X)
q <- ncol(Y)
library(CCP)
#p <- 2
#q <- 2
p.asym(Price.cc$cor, n, p, q, tstat = "Wilks")
#p <- 2
#q <- 2
p.asym(Price.cc$cor, n, p, q, tstat = "Wilks")
p.asym(Price.cc$cor, n, p, q, tstat = "Hotelling")
p.asym(Price.cc$cor, n, p, q, tstat = "Pillai")
p.asym(Price.cc$cor, n, p, q, tstat = "Roy")
X <- Price[1:3]
Y <- Price[4:5]
print(Price.cc <- cc(X, Y))
n <- nrow(Price)
p <- ncol(X)
q <- ncol(Y)
library(CCP)
#p <- 2
#q <- 2
p.asym(Price.cc$cor, n, p, q, tstat = "Wilks")
p.asym(Price.cc$cor, n, p, q, tstat = "Hotelling")
plt.cc(Price.cc, var.label=TRUE)
p.asym(Price.cc$cor, n, p, q, tstat = "Pillai")
p.asym(Price.cc$cor, n, p, q, tstat = "Roy")
p.perm(X, Y, type="wilks")
p.perm(X,Y, type = "Wilks")
p.perm(X,Y, type = "Wilks")
p.perm(X,Y, type = "Hotelling")
p.perm(X,Y, type = "Pillai")
p.perm(X,Y, type = "Roy")
library(CCA)
library(CCP)
X <- Sigma[1:2]
Y <- Price[3:4]
print(Price.cc <- cc(X, Y))
X <- Sigma[1:2]
Y <- Sigma[3:4]
print(Sigma.cc <- cc(X, Y))
plt.cc(Price.cc, var.label=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
Sigma.cc <- cc(X, Y)
X <- Sigma[1:2]
Y <- Sigma[3:4]
n <- 22
p <- ncol(X)
q <- ncol(Y)
Sigma.cc <- cc(X, Y)
print(p)
print(q)
print(p)
p <- ncol(X)
q <- ncol(Y)
print(p)
n <- nrow(Price)
X <- Sigma[1:2]
Y <- Sigma[3:4]
n <- 22
p <- 2
print(p)
q <- 2
print(q)
Sigma.cc <- cc(X, Y)
head(Price)
#X <- Sigma(rnorm(100), ncol = 4)
#Y <- Sigma(rnorm(100), ncol = 4)
#canon(X[,1:2], Y[,3:4])
cancor(X1, X2)
n <- 22
p <- 4
print(p)
q <- 4
print(q)
Sigma.cc <- cc(X, Y)
print(Sigma.cc <- cc(X, Y))
#X <- Sigma(rnorm(100), ncol = 4)
#Y <- Sigma(rnorm(100), ncol = 4)
#canon(X[,1:2], Y[,3:4])
cancor(X1, X2)
print(Price.cc <- cc(X, Y))
summary(Price)
library(CCA)
library(CCP)
X <- Price[2:3]
Y <- Price[4:5]
print(Price.cc <- cc(X, Y))
X <- Sigma[1:2]
Y <- Sigma[3:4]
print(Sigma.cc <- cc(X, Y))
X1 <- Sigma[1:2]
print(X1)
X1 <- Sigma[,1:2]
print(X1)
X2 <- Sigma[,3:4]
print(X2)
#X <- Sigma(rnorm(100), ncol = 4)
#Y <- Sigma(rnorm(100), ncol = 4)
#canon(X[,1:2], Y[,3:4])
cancor(X1, X2)
X <- Sigma[,1:2]
Y <- Sigma[,3:4]
print(Sigma.cc <- cc(X, Y))
plt.cc(Sigma.cc, var.label=TRUE)
p <- ncol(X1)
print(p)
q <- ncol(X2)
print(q)
#p <- 2
#q <- 2
p.asym(Price.cc$cor, n, p, q, tstat = "Wilks")
print(Sigma.cc <- cc(X, Y))
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
p.perm(X,Y, type = "Wilks")
ans_c_i <- Sigma.cc$cor
print(ans_c_i)
p.asym(Price.cc$cor, n, p, q, tstat = "Wilks")
p.perm(X,Y, type = "Wilks")
Wilks_Sigma <- p.asym(Price.cc$cor, n, p, q, tstat = "Wilks")
ans_c_ii_pval <- Wilks_Sigma$p.value
print(ans_c_ii_pval)
Price
Wilks.test(Sigma)
install.packages("maas")
install.packages("MASS")
Wilks.test(Sigma)
wilks.test(Sigma)
Wilks_Sigma <- p.asym(Price.cc$cor, n, p, q, tstat = "Wilks")
source("~/.active-rstudio-document", echo=TRUE)
ans_c_ii_lambda <- Wilks_Sigma$id
print(ans_c_ii_lambda)
ans_c_ii_lambda <- Wilks_Sigma$stat
print(ans_c_ii_lambda)
ans_c_i <- Sigma.cc$cor
print(ans_c_i)
print(ans_c_ii_pval)
Wilks_Sigma <- p.asym(Sigma.cc$cor, n, p, q, tstat = "Wilks")
source("C:/Users/rupes/OneDrive/Desktop/w3-q9-5368767-long.R", echo=TRUE)
ans_c_i <- Sigma.cc$cor
print(ans_c_i)
source("~/.active-rstudio-document", echo=TRUE)
print(Sigma.cc <- cc(X, Y))
Wilks_Sigma <- p.asym(Sigma.cc$cor, n, p, q, tstat = "Wilks")
ans_c_ii_pval <- Wilks_Sigma$p.value
ans_c_ii_lambda <- Wilks_Sigma$stat
print(ans_c_ii_lambda)
print(ans_c_ii_pval)
X <- Price[2:3]
Y <- Price[4:5]
print(Price.cc <- cc(X, Y))
plt.cc(Price.cc, var.label=TRUE)
Xs <- scale(X)
Ys <- scale(Y)
print(Scale.cc <- cc(Xs, Ys))
n <- nrow(Price)
p <- ncol(X)
q <- ncol(Y)
print(p)
library(CCP)
#p <- 2
#q <- 2
p.asym(Price.cc$cor, n, p, q, tstat = "Wilks")
X <- Sigma[,1:2]
Y <- Sigma[,3:4]
source("C:/Users/rupes/OneDrive/Desktop/w3-q9-5368767-long.R", echo=TRUE)
Wilks_Sigma_Scale <- p.asym(Sigma_Scale.cc$cor, n, p, q, tstat = "Wilks")
ans_c_ii_lambda <- Wilks_Sigma_Scale$stat
print(ans_c_ii_lambda)
source("~/.active-rstudio-document", encoding = 'UTF-8', echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
head(Price)
# Calculate the residuals after controlling for prices
beef_residuals <- resid(lm(Price$beef_consumption ~ Price$steer_price))
pork_residuals <- resid(lm(Price$pork_consumption ~ Price$hog_price))
# Compute the partial correlation
partial_correlation <- cor.test(beef_residuals, pork_residuals, method = "pearson")$estimate
# Print the partial correlation
print(partial_correlation)
# Perform the hypothesis test
p_value <- cor.test(beef_residuals, pork_residuals, method = "pearson", alternative = "two.sided")$p.value
# Print the partial correlation and p-value
print("Partial Correlation:")
print(partial_correlation)
print("p-value:")
print(p_value)
# Significance level (alpha)
alpha <- 0.05
# Check the results
if (p_value > alpha) {
print("No significant effect of price changes on the consumption of beef and pork.")
} else {
print("There is a significant effect of price changes on the consumption of beef and pork.")
}
print(Scale.cc <- cc(Xs, Ys))
source("~/.active-rstudio-document", encoding = 'UTF-8', echo=TRUE)
head data
head(data)
# Step 3: Perform canonical correlation analysis
result <- cc(data[, c("U", "V")], data[, c("U", "V")])
# View the results
print(result)
# Step 4: Perform permutation test
num_permutations <- 1000
observed_can_cor <- result$cor[1]  # Observed canonical correlation
print(observed_can_cor)
observed_can_cor <- result$cor#[1]  # Observed canonical correlation
print(observed_can_cor)
# Step 5: Calculate the p-value
p_value <- mean(permuted_can_cor >= observed_can_cor)
# View the results
print(paste("Observed Canonical Correlation:", observed_can_cor))
print(paste("Estimated p-value:", p_value))
# View the results
print(result)
# Assuming multivariate normality, perform Wilks's Lambda test
wilks_test <- manova(cbind(X, Y) ~ 1)
# Assuming multivariate normality, perform Wilks's Lambda test
wilks_test <- manova(cbind(X, Y) ~ 1)
source("C:/Users/rupes/OneDrive/Desktop/w3-q9-5368767-long.R", echo=TRUE)
print(wilks_test)
summary(wilks_test)
print(wilks_test)
ans_c_ii_lambda <- 1 - wilks_test$stats$Pillai[1]
ans_c_ii_pval <- wilks_test$stats$Pillai[2]
print(ans_c_ii_lambda)
print(ans_c_ii_pval)
print(wilks_test$stats)
print(wilks_test$stats$Pillai)
ans_c_ii_lambda <- 1 - wilks_test$stats$Pillai[1]
print(wilks_test$stats$Pillai[1])
# Degrees of freedom for the hypothesis
p1 <- 2  # Number of variables in set (X1, X2)
p2 <- 2  # Number of variables in set (X3, X4)
p <- p1 + p2  # Total number of variables
# Wilks's Lambda test statistic
lambda <- det(Sigma)^(1/n) / det(Sigma[1:p1, 1:p1])^(1/n)
# Degrees of freedom for the test statistic
df1 <- p * (p1 + p2 - 1) / 2
df2 <- p1 * p2
# Calculate the p-value using the cumulative distribution function (CDF) of the F-distribution
p_value <- 1 - pf(lambda, df1, df2)
# Store the results in variables
ans_c_ii_lambda <- lambda
ans_c_ii_pval <- p_value
print(lambda)
print(p_value)
# Wilks's Lambda test statistic
lambda <- det(Sigma[1:p1, 1:p1])^(1/n) / det(Sigma)^(1/n)
print(lambda)
# Degrees of freedom for the test statistic
df1 <- p * (p1 + p2 - 1) / 2
df2 <- p1 * p2
# Calculate the p-value using the cumulative distribution function (CDF) of the F-distribution
p_value <- 1 - pf(lambda, df1, df2)
print(p_value)
print(lambda)
ans_c_i <- Sigma.cc$cor
X <- Sigma[,1:2]
Y <- Sigma[,3:4]
print(Sigma.cc <- cc(X, Y))
ans_c_i <- Sigma.cc$cor
print(ans_c_i)
# Compute canonical correlations
cc_result <- cancor(X, Y)
ans_c_i <- cc_result$cor
print(ans_c_i)
library(rrcov)
Wilks.test(X ~ Y)
install.packages("rrcov")
library(rrcov)
Wilks.test(X ~ Y)
Wilks.test(X ~ Y, data=Sigma)
library(rrcov)
grp <- as.factor(Sigma[,3:4])
X <- as.matrix(Sigma[,1:2])
Wilks.test(Y, grouping=grp, method="c")
Wilks.test(Y, method="c")
Wilks.test(Y, grouping=Y,  method="c")
Y <- as.factor(Sigma[,3:4])
X <- as.matrix(Sigma[,1:2])
Wilks.test(Y, grouping=Y,  method="c")
Wilks.test(Y, grouping='Y',  method="c")
print(wilks_test$stats$Pillai[1])
ans_c_ii_lambda <- 1 - wilks_test$stats$Pillai[1]
ans_c_ii_pval <- wilks_test$stats$Pillai[2]
print(ans_c_ii_lambda)
wilks_test <- manova(cbind(X, Y) ~ 1)
Wilks_Sigma <- p.asym(Sigma.cc$cor, n, p, q, tstat = "Wilks")
Wilks_Sigma_Scale <- p.asym(Sigma_Scale.cc$cor, n, p, q, tstat = "Wilks")
ans_c_ii_pval <- Wilks_Sigma$p.value
ans_c_ii_lambda <- Wilks_Sigma$stat
ans_c_ii_lambda <- Wilks_Sigma_Scale$stat
print(ans_c_ii_lambda)
# Degrees of freedom for the hypothesis
p1 <- 2  # Number of variables in set (X1, X2)
p2 <- 2  # Number of variables in set (X3, X4)
p <- p1 + p2  # Total number of variables
# Wilks's Lambda test statistic
lambda <- det(Sigma[1:p1, 1:p1])^(1/n) / det(Sigma)^(1/n)
print(lambda)
# Degrees of freedom for the test statistic
df1 <- p * (p1 + p2 - 1) / 2
df2 <- p1 * p2
# Calculate the p-value using the cumulative distribution function (CDF) of the F-distribution
p_value <- 1 - pf(lambda, df1, df2)
print(p_value)
# Store the results in variables
ans_c_ii_lambda <- lambda
ans_c_ii_pval <- p_value
# Degrees of freedom for the hypothesis
p1 <- ncol(X)  # Number of variables in set (X1, X2)
p2 <- ncol(Y)  # Number of variables in set (X3, X4)
p <- p1 + p2  # Total number of variables
# Wilks's Lambda test statistic
lambda <- det(Sigma[1:p1, 1:p1])^(1/n) / det(Sigma)^(1/n)
print(lambda)
# Degrees of freedom for the test statistic
df1 <- p * (p1 + p2 - 1) / 2
df2 <- p1 * p2
# Calculate the p-value using the cumulative distribution function (CDF) of the F-distribution
p_value <- 1 - pf(lambda, df1, df2)
print(p_value)
# Store the results in variables
ans_c_ii_lambda <- lambda
ans_c_ii_pval <- p_value
print(p1)
print(p2)
# Degrees of freedom for the hypothesis
p1 <- 2  # Number of variables in set (X1, X2)
print(p1)
p2 <- 2  # Number of variables in set (X3, X4)
p <- p1 + p2  # Total number of variables
# Wilks's Lambda test statistic
lambda <- det(Sigma[1:p1, 1:p1])^(1/n) / det(Sigma)^(1/n)
print(lambda)
# Degrees of freedom for the test statistic
df1 <- p * (p1 + p2 - 1) / 2
df2 <- p1 * p2
# Calculate the p-value using the cumulative distribution function (CDF) of the F-distribution
p_value <- 1 - pf(lambda, df1, df2)
print(p_value)
# Store the results in variables
ans_c_ii_lambda <- lambda
ans_c_ii_pval <- p_value
#Readng the matrix
Sigma <- matrix(c(1, -4, 0, -5, -4, 116, -60, 50, 0, -60, 61, -38, -5, 50, -38, 374), 4, 4)
summary(Sigma) #printing Sigma summary for each col
source("C:/Users/rupes/OneDrive/Desktop/w3-q9-5368767-long.R", echo=TRUE)
source("C:/Users/rupes/OneDrive/Desktop/w3-q9-5368767-long.R", echo=TRUE)
source("C:/Users/rupes/OneDrive/Desktop/w3-q9-5368767-long.R", echo=TRUE)
source("C:/Users/rupes/OneDrive/Desktop/w3-q9-5368767-long.R", echo=TRUE)
source("C:/Users/rupes/OneDrive/Desktop/w3-q9-5368767-long.R", echo=TRUE)
source("C:/Users/rupes/OneDrive/Desktop/w3-q9-5368767-long.R", echo=TRUE)
source("C:/Users/rupes/OneDrive/Desktop/w3-q9-5368767-long.R", echo=TRUE)
# Create the covariance matrix
cov_mat <- cov(Sigma)
Sigma <- matrix(c(1, -4, 0, -5, -4, 116, -60, 50, 0, -60, 61, -38, -5, 50, -38, 374), 4, 4)
# Create the covariance matrix
cov_mat <- cov(Sigma)
print(cov_mat)
write.csv(as.data.frame(X), file = "X.csv")
source("~/.active-rstudio-document", echo=TRUE)
head(X)
summary(X)
ggpairs(X)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
install.packages("GGally")
source("~/.active-rstudio-document", echo=TRUE)
library(readr)
install.packages("readr")
install.packages("readr")
library(GGally)
source("~/.active-rstudio-document", echo=TRUE)
library(CCA)
install.packages("readr")
install.packages("here")
install.packages("readr")
install.packages("here")
install.packages("ggplot2")
install.packages("readr")
install.packages("tidyverse")
install.packages("lubridate")
install.packages("mgcv")
install.packages("fpp2")
install.packages("fable")
install.packages('feasts')
install.packages('corrplot')
install.packages("corrplot")
library(readr)
library(here)
library(ggplot2)
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("readr")
install.packages("here")
install.packages("ggplot2")
install.packages("tidyverse")
install.packages("lubridate")
install.packages("mgcv")
install.packages("readr")
install.packages("tidyverse")
install.packages("fpp2")
install.packages("fable")
install.packages('feasts')
install.packages('corrplot')
install.packages("corrplot")
library(readr)
library(here)
library(ggplot2)
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
install.packages('cli')
install.packages("cli")
library(tidyverse)
library(tidyr)
library(lubridate)
library(mgcv)
library(fpp2)
library(fable)
library(feasts)
library(corrplot)
library(forecast)
install.packages("readr")
install.packages("here")
install.packages("ggplot2")
install.packages("tidyverse")
install.packages("lubridate")
install.packages("mgcv")
install.packages("fpp2")
install.packages("fable")
install.packages("lubridate")
install.packages("fpp2")
install.packages("mgcv")
install.packages("tidyverse")
install.packages("ggplot2")
install.packages("readr")
install.packages("ggplot2")
install.packages("tidyverse")
install.packages("readr")
install.packages("mgcv")
install.packages('feasts')
install.packages("readr")
install.packages('corrplot')
install.packages("corrplot")
library(readr)
library(here)
library(ggplot2)
library(tidyverse)
library(lubridate)
library(mgcv)
library(fpp2)
library(fable)
install.packages("corrplot")
install.packages("corrplot")
install.packages('fable')
library(readr)
library(here)
library(ggplot2)
package.install('ggplot2')
install.packages('ggplot2')
install.packages("readr")
install.packages("here")
install.packages("ggplot2")
install.packages("here")
install.packages("readr")
install.packages("tidyverse")
install.packages("readr")
install.packages("lubridate")
install.packages("tidyverse")
library(GGally)
install.packages(c("ggplot2", "ggplot2.utils"))
package(ggplot2)
package_version(ggplot2)
library(ggplot2)
library(ggdist)
install.packages(c("askpass", "cachem", "CCA", "checkmate", "cli", "colorspace", "cpp11", "crayon", "curl", "data.table", "DEoptimR", "deSolve", "digest", "dotCall64", "dplyr", "evaluate", "fable", "fansi", "farver", "fastmap", "fda", "fields", "FNN", "forecast", "fracdiff", "fs", "GGally", "ggdist", "ggm", "glue", "GPArotation", "gtable", "haven", "highr", "htmltools", "igraph", "isoband", "jsonlite", "knitr", "ks", "labeling", "lifecycle", "locfit", "lubridate", "maps", "markdown", "MASS", "mclust", "mgcv", "multicool", "munsell", "mvtnorm", "openssl", "packrat", "pcaPP", "plot3D", "plyr", "pracma", "prettyunits", "processx", "progress", "ps", "psych", "purrr", "ragg", "rainbow", "RColorBrewer", "Rcpp", "RcppArmadillo", "RCurl", "readr", "readxl", "renv", "reticulate", "rlang", "rmarkdown", "robustbase", "rprojroot", "rrcov", "rsconnect", "rstudioapi", "scales", "slider", "spam", "stringi", "stringr", "sys", "systemfonts", "textshaping", "tidyr", "tidyselect", "timechange", "tinytex", "tseries", "TTR", "tzdb", "utf8", "uuid", "vctrs", "viridis", "viridisLite", "vroom", "warp", "xfun", "xml2", "xts", "yaml"))
install.packages(c("askpass", "cachem", "CCA", "checkmate", "cli", "colorspace", "cpp11", "crayon", "curl", "data.table", "DEoptimR", "deSolve", "digest", "dotCall64", "dplyr", "evaluate", "fable", "fansi", "farver", "fastmap", "fda", "fields", "FNN", "forecast", "fracdiff", "fs", "GGally", "ggdist", "ggm", "glue", "GPArotation", "gtable", "haven", "highr", "htmltools", "igraph", "isoband", "jsonlite", "knitr", "ks", "labeling", "lifecycle", "locfit", "lubridate", "maps", "markdown", "MASS", "mclust", "mgcv", "multicool", "munsell", "mvtnorm", "openssl", "packrat", "pcaPP", "plot3D", "plyr", "pracma", "prettyunits", "processx", "progress", "ps", "psych", "purrr", "ragg", "rainbow", "RColorBrewer", "Rcpp", "RcppArmadillo", "RCurl", "readr", "readxl", "renv", "reticulate", "rlang", "rmarkdown", "robustbase", "rprojroot", "rrcov", "rsconnect", "rstudioapi", "scales", "slider", "spam", "stringi", "stringr", "sys", "systemfonts", "textshaping", "tidyr", "tidyselect", "timechange", "tinytex", "tseries", "TTR", "tzdb", "utf8", "uuid", "vctrs", "viridis", "viridisLite", "vroom", "warp", "xfun", "xml2", "xts", "yaml"))
install.packages(c("askpass", "cachem", "CCA", "checkmate", "cli", "colorspace", "cpp11", "crayon", "curl", "data.table", "DEoptimR", "deSolve", "digest", "dotCall64", "dplyr", "evaluate", "fable", "fansi", "farver", "fastmap", "fda", "fields", "FNN", "forecast", "fracdiff", "fs", "GGally", "ggdist", "ggm", "glue", "GPArotation", "gtable", "haven", "highr", "htmltools", "igraph", "isoband", "jsonlite", "knitr", "ks", "labeling", "lifecycle", "locfit", "lubridate", "maps", "markdown", "MASS", "mclust", "mgcv", "multicool", "munsell", "mvtnorm", "openssl", "packrat", "pcaPP", "plot3D", "plyr", "pracma", "prettyunits", "processx", "progress", "ps", "psych", "purrr", "ragg", "rainbow", "RColorBrewer", "Rcpp", "RcppArmadillo", "RCurl", "readr", "readxl", "renv", "reticulate", "rlang", "rmarkdown", "robustbase", "rprojroot", "rrcov", "rsconnect", "rstudioapi", "scales", "slider", "spam", "stringi", "stringr", "sys", "systemfonts", "textshaping", "tidyr", "tidyselect", "timechange", "tinytex", "tseries", "TTR", "tzdb", "utf8", "uuid", "vctrs", "viridis", "viridisLite", "vroom", "warp", "xfun", "xml2", "xts", "yaml"))
install.packages(c("askpass", "cachem", "CCA", "checkmate", "cli", "colorspace", "cpp11", "crayon", "curl", "data.table", "DEoptimR", "deSolve", "digest", "dotCall64", "dplyr", "evaluate", "fable", "fansi", "farver", "fastmap", "fda", "fields", "FNN", "forecast", "fracdiff", "fs", "GGally", "ggdist", "ggm", "glue", "GPArotation", "gtable", "haven", "highr", "htmltools", "igraph", "isoband", "jsonlite", "knitr", "ks", "labeling", "lifecycle", "locfit", "lubridate", "maps", "markdown", "MASS", "mclust", "mgcv", "multicool", "munsell", "mvtnorm", "openssl", "packrat", "pcaPP", "plot3D", "plyr", "pracma", "prettyunits", "processx", "progress", "ps", "psych", "purrr", "ragg", "rainbow", "RColorBrewer", "Rcpp", "RcppArmadillo", "RCurl", "readr", "readxl", "renv", "reticulate", "rlang", "rmarkdown", "robustbase", "rprojroot", "rrcov", "rsconnect", "rstudioapi", "scales", "slider", "spam", "stringi", "stringr", "sys", "systemfonts", "textshaping", "tidyr", "tidyselect", "timechange", "tinytex", "tseries", "TTR", "tzdb", "utf8", "uuid", "vctrs", "viridis", "viridisLite", "vroom", "warp", "xfun", "xml2", "xts", "yaml"))
