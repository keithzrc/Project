# Printing the result
head(new_timestatmp_format_data_forecastdemand_vic)
# generate columns based on elements of time
extract_datetime_components <- function(data, datetime_column) {
data %>%
mutate(
year = format({{ datetime_column }}, "%Y"),
month = format({{ datetime_column }}, "%m"),
day = format({{ datetime_column }}, "%d"),
hour = format({{ datetime_column }}, "%H"),
minute = format({{ datetime_column }}, "%M"),
second = format({{ datetime_column }}, "%S")
)
}
# Example usage:
new_timestatmp_format_data_forecastdemand_vic <- extract_datetime_components(data_forecastdemand_vic, DATETIME)
head(new_timestatmp_format_data_forecastdemand_vic)
# generate columns based on elements of time
extract_datetime_components <- function(data, datetime_column) {
data %>%
mutate(
year = as.numeric(format({{ datetime_column }}, "%Y")),
month = as.numeric(format({{ datetime_column }}, "%m")),
day = as.numeric(format({{ datetime_column }}, "%d")),
hour = as.numeric(format({{ datetime_column }}, "%H")),
minute = as.numeric(format({{ datetime_column }}, "%M")),
second = as.numeric(format({{ datetime_column }}, "%S"))
)
}
# Example usage:
new_timestatmp_format_data_forecastdemand_vic <- extract_datetime_components(data_forecastdemand_vic, DATETIME)
head(new_timestatmp_format_data_forecastdemand_vic)
str(data_temperature_vic)
# generate columns based on elements of time
extract_forecast_datetime_components <- function(data, datetime_column) {
data %>%
mutate(
year = as.numeric(format({{ datetime_column }}, "%Y")),
month = as.numeric(format({{ datetime_column }}, "%m")),
day = as.numeric(format({{ datetime_column }}, "%d")),
hour = as.numeric(format({{ datetime_column }}, "%H")),
minute = as.numeric(format({{ datetime_column }}, "%M")),
second = as.numeric(format({{ datetime_column }}, "%S"))
)
}
extract_temperature_ datetime_components <- function(data, datetime_column) {
extract_temperature_datetime_components <- function(data, datetime_column) {
data %>%
mutate(
year = as.numeric(format({{ datetime_column }}, "%Y")),
month = as.numeric(format({{ datetime_column }}, "%m")),
day = as.numeric(format({{ datetime_column }}, "%d")),
hour = as.numeric(format(strptime({{ datetime_column }}, "%d/%m/%Y %H:%M"), "%H")),
minute = as.numeric(format(strptime({{ datetime_column }}, "%d/%m/%Y %H:%M"), "%M"))
)
}
# split forecast data time stamps into constituent components
new_timestamp_format_data_forecastdemand_vic <- extract_datetime_components(data_forecastdemand_vic, DATETIME)
# split temperature data time stamps into constituent components
new_timestamp_format_data_temperature_vic <- extract_datetime_components(data_temperature_vic, DATETIME)
extract_temperature_datetime_components <- function(data, datetime_column) {
data %>%
mutate(
day = as.numeric(format({{ datetime_column }}, "%d")),
month = as.numeric(format({{ datetime_column }}, "%m")),
year = as.numeric(format({{ datetime_column }}, "%Y")),
hour = as.numeric(format(strptime({{ datetime_column }}, "%d/%m/%Y %H:%M"), "%H")),
minute = as.numeric(format(strptime({{ datetime_column }}, "%d/%m/%Y %H:%M"), "%M"))
)
}
# split temperature data time stamps into constituent components
new_timestamp_format_data_temperature_vic <- extract_datetime_components(data_temperature_vic, DATETIME)
extract_temperature_datetime_components <- function(data, datetime_column) {
data %>%
mutate(
year = as.numeric(format(strptime({{ datetime_column }}, "%d/%m/%Y %H:%M"), "%Y")),
month = as.numeric(format(strptime({{ datetime_column }}, "%d/%m/%Y %H:%M"), "%m")),
day = as.numeric(format(strptime({{ datetime_column }}, "%d/%m/%Y %H:%M"), "%d")),
hour = as.numeric(format(strptime({{ datetime_column }}, "%d/%m/%Y %H:%M"), "%H")),
minute = as.numeric(format(strptime({{ datetime_column }}, "%d/%m/%Y %H:%M"), "%M"))
)
}
# split temperature data time stamps into constituent components
new_timestamp_format_data_temperature_vic <- extract_datetime_components(data_temperature_vic, DATETIME)
library(readr)
library(here)
library(ggplot2)
library(dplyr)
# Load Data
# VIC
data_forecastdemand_vic <- read_csv(here("/Users/josephrobertmelbin/Documents/GitHub/Project2/data/Australia/a/forecastdemand_vic.csv"))
data_temperature_vic <- read_csv(here("/Users/josephrobertmelbin/Documents/GitHub/Project2/data/Australia/d/temprature_vic.csv"))
data_demand_vic <- read_csv(here("/Users/josephrobertmelbin/Documents/GitHub/Project2/data/Australia/d/totaldemand_vic.csv"))
# SA
data_forecastdemand_sa <- read_csv(here("/Users/josephrobertmelbin/Documents/GitHub/Project2/data/Australia/b/forecastdemand_sa.csv"))
data_temperature_sa <- read_csv(here("/Users/josephrobertmelbin/Documents/GitHub/Project2/data/Australia/d/temprature_sa.csv"))
data_demand_sa <- read_csv(here("/Users/josephrobertmelbin/Documents/GitHub/Project2/data/Australia/d/totaldemand_sa.csv"))
# QLD
data_forecastdemand_qld <- read_csv(here("/Users/josephrobertmelbin/Documents/GitHub/Project2/data/Australia/c/forecastdemand_qld.csv"))
data_temperature_qld <- read_csv(here("/Users/josephrobertmelbin/Documents/GitHub/Project2/data/Australia/d/temprature_qld.csv"))
data_demand_qld <- read_csv(here("/Users/josephrobertmelbin/Documents/GitHub/Project2/data/Australia/d/totaldemand_qld.csv"))
# NSW
data_forecastdemand_nsw <- read_csv(here("/Users/josephrobertmelbin/Documents/GitHub/Project2/data/NSW/forecastdemand_nsw.csv"))
head(data_demand_vic)
head(data_forecastdemand_vic)
# demand
new_timestamp_format_data_demand_vic <- extract_datetime_components(data_demand_vic, DATETIME)
head(new_timestamp_format_data_demand_vic)
head(data_temperature_vic)
data_temperature_vic$YEAR <- year(data_temperature_vic$DATETIME)
data_temperature_vic$YEAR <- year(data_temperature_vic$DATETIME)
library(lubridate)
data_temperature_vic$YEAR <- year(data_temperature_vic$DATETIME)
data_temperature_vic$MONTH <- month(data_temperature_vic$DATETIME)
data_temperature_vic$DAY <- day(data_temperature_vic$DATETIME)
data_temperature_vic$HOUR <- hour(data_temperature_vic$DATETIME)
data_temperature_vic$MINUTE <- minute(data_temperature_vic$DATETIME)
data_temperature_vic$SECOND <- second(data_temperature_vic$DATETIME)
head(data_temperature_vic)
data_temperature_vic <- read_csv(here("/Users/josephrobertmelbin/Documents/GitHub/Project2/data/Australia/d/temprature_vic.csv"))
data_temperature_vic$YEAR <- day(data_temperature_vic$DATETIME)
data_temperature_vic$MONTH <- month(data_temperature_vic$DATETIME)
data_temperature_vic$DAY <- year(data_temperature_vic$DATETIME)
data_temperature_vic$HOUR <- hour(data_temperature_vic$DATETIME)
data_temperature_vic$MINUTE <- minute(data_temperature_vic$DATETIME)
data_temperature_vic$SECOND <- second(data_temperature_vic$DATETIME)
head(data_temperature_vic)
data_temperature_vic <- read_csv(here("/Users/josephrobertmelbin/Documents/GitHub/Project2/data/Australia/d/temprature_vic.csv"))
data_temperature_vic$DATETIME <- as.POSIXct(data$DATETIME, format = "%d/%m/%Y %H:%M")
data_temperature_vic$DATETIME <- as.POSIXct(data_temperature_vic$DATETIME, format = "%d/%m/%Y %H:%M")
data_temperature_vic$YEAR <- day(data_temperature_vic$DATETIME)
data_temperature_vic$MONTH <- month(data_temperature_vic$DATETIME)
data_temperature_vic$DAY <- year(data_temperature_vic$DATETIME)
data_temperature_vic$HOUR <- hour(data_temperature_vic$DATETIME)
data_temperature_vic$MINUTE <- minute(data_temperature_vic$DATETIME)
data_temperature_vic$SECOND <- second(data_temperature_vic$DATETIME)
head(data_temperature_vic)
data_temperature_vic$day <- day(data_temperature_vic$DATETIME)
data_temperature_vic$month <- month(data_temperature_vic$DATETIME)
data_temperature_vic$day <- year(data_temperature_vic$DATETIME)
data_temperature_vic$hour <- hour(data_temperature_vic$DATETIME)
data_temperature_vic$minute <- minute(data_temperature_vic$DATETIME)
data_temperature_vic$second <- second(data_temperature_vic$DATETIME)
head(data_temperature_vic)
data_temperature_vic <- read_csv(here("/Users/josephrobertmelbin/Documents/GitHub/Project2/data/Australia/d/temprature_vic.csv"))
extract_temperature_datetime_components <- function(data) {
# Convert DATETIME column to POSIXct
data$DATETIME <- as.POSIXct(data$DATETIME, format = "%d/%m/%Y %H:%M")
# Extract datetime components
data$day <- day(data$DATETIME)
data$month <- month(data$DATETIME)
data$year <- year(data$DATETIME)
data$hour <- hour(data$DATETIME)
data$minute <- minute(data$DATETIME)
data$second <- second(data$DATETIME)
return(data)
}
new_timestamp_format_data_temperature_vic <- extract_temperature_datetime_components(data_temperature_vic)
head(new_timestamp_format_data_temperature_vic)
# split data time stamps into constituent components
# forecast
new_timestamp_format_data_forecastdemand_vic <- extract_datetime_components(data_forecastdemand_vic, DATETIME)
head(new_timestamp_format_data_forecastdemand_vic)
new_timestamp_format_data_forecastdemand_sa <- extract_datetime_components(data_forecastdemand_sa, DATETIME)
new_timestamp_format_data_forecastdemand_qld <- extract_datetime_components(data_forecastdemand_qld, DATETIME)
new_timestamp_format_data_forecastdemand_nsw <- extract_datetime_components(data_forecastdemand_nsw, DATETIME)
# demand
new_timestamp_format_data_demand_vic <- extract_datetime_components(data_demand_vic, DATETIME)
new_timestamp_format_data_demand_sa <- extract_datetime_components(data_demand_sa, DATETIME)
new_timestamp_format_data_demand_qld <- extract_datetime_components(data_demand_qld, DATETIME)
new_timestamp_format_data_demand_nsw <- extract_datetime_components(data_demand_nsw, DATETIME)
head(data_demand_nsw)
# nsw demand time series data format
extract_nsw_demand_datetime_components <- function(data) {
# Convert DATETIME column to POSIXct
data$DATETIME <- as.POSIXct(data$DATETIME, format = "%d/%m/%Y %H:%M")
# Extract datetime components
data$day <- day(data$DATETIME)
data$month <- month(data$DATETIME)
data$year <- year(data$DATETIME)
data$hour <- hour(data$DATETIME)
data$minute <- minute(data$DATETIME)
data$second <- second(data$DATETIME)
return(data)
}
# need a unique function for nsw
new_timestamp_format_data_demand_nsw <- extract_nsw_demand_datetime_components(data_demand_nsw)
head(new_timestamp_format_data_demand_nsw)
new_timestamp_format_data_temperature_sa <- extract_temperature_datetime_components(data_temperature_sa)
new_timestamp_format_data_temperature_qld <- extract_temperature_datetime_components(data_temperature_qld)
new_timestamp_format_data_temperature_nsw <- extract_temperature_datetime_components(data_temperature_nsw)
head(new_timestamp_format_data_forecastdemand_vic)
# filter data to the same half hour intervals
head(new_timestamp_format_data_forecastdemand_vic)
condition <- new_timestamp_format_data_forecastdemand_vic$hour == 0 and & new_timestamp_format_data_forecastdemand_vic$hour == 0
condition <- new_timestamp_format_data_forecastdemand_vic$hour == 0 & new_timestamp_format_data_forecastdemand_vic$hour == 0
# Create new dataframe by filtering
vic_0_0 <- new_timestamp_format_data_forecastdemand_vic$hour[condition, ]
# Create new dataframe by filtering
vic_0_0 <- new_timestamp_format_data_forecastdemand_vic[condition, ]
head(vic_0_0)
head(vic_0_0)
condition <- new_timestamp_format_data_forecastdemand_vic$hour == 0 & new_timestamp_format_data_forecastdemand_vic$minute == 0
# Create new dataframe by filtering
vic_0_0 <- new_timestamp_format_data_forecastdemand_vic[condition, ]
head(vic_0_0)
head(new_timestamp_format_data_demand_vic)
vic_forecast_0_0 <- new_timestamp_format_data_forecastdemand_vic[condition, ]
head(vic_forecast_0_0)
# demand
condition <- new_timestamp_format_data_demand_vic$hour == 0 & new_timestamp_format_data_demand_vic$minute == 0
vic_demand_0_0 <- new_timestamp_format_data_demand_vic[condition, ]
head(vic_demand_0_0)
nrow(vic_demand_0_0)
vic_temperature_0_0 <-  <- new_timestamp_format_data_temperature_vic[condition, ][condition, ]
vic_temperature_0_0 <- new_timestamp_format_data_temperature_vic[condition, ][condition, ]
vic_temperature_0_0 <- new_timestamp_format_data_temperature_vic[condition, ]
# temperature
condition <- new_timestamp_format_data_temperature_vic$hour == 0 & new_timestamp_format_data_temperature_vic$minute == 0
vic_temperature_0_0 <- new_timestamp_format_data_temperature_vic[condition, ]
head(vic_temperature_0_0)
nrow(vic_temperature_0_0)
nrow(vic_forecast_0_0)
unique(new_timestamp_format_data_forecastdemand_vic$hour)
unique(new_timestamp_format_data_forecastdemand_vic$minute)
# Iterate over hours 0 to 23
for (hour in 0:23) {
# Iterate over minutes 0 and 30
for (minute in c(0, 30)) {
# Create condition for current hour and minute
condition <- data$hour == hour & data$minute == minute
# Filter the data based on the condition
filtered_data <- data[condition, ]
# Create a dataframe name based on hour and minute
dataframe_name <- paste0("hour_", hour, "_minute_", minute)
# Assign the filtered data to a new dataframe with the created name
assign(dataframe_name, filtered_data)
}
}
create_individual_dataframes <- function(data) {
# Iterate over hours 0 to 23
for (hour in 0:23) {
# Iterate over minutes 0 and 30
for (minute in c(0, 30)) {
# Create condition for current hour and minute
condition <- data$hour == hour & data$minute == minute
# Filter the data based on the condition
filtered_data <- data[condition, ]
# Create a dataframe name based on hour and minute
dataframe_name <- paste0("hour_", hour, "_minute_", minute)
# Assign the filtered data to a new dataframe with the created name
assign(dataframe_name, filtered_data)
}
}
# Return the list of dataframe names
return(paste0("hour_", 0:23, "_minute_", rep(c(0, 30), each = 24)))
}
individual_dataframe_names <- create_individual_dataframes(new_timestamp_format_data_forecastdemand_vic)
for (dataframe_name in individual_dataframe_names) {
cat("Head of", dataframe_name, ":\n")
print(head(get(dataframe_name)))
cat("\n")
}
# forecast
condition1 <- new_timestamp_format_data_forecastdemand_vic$hour == 0 & new_timestamp_format_data_forecastdemand_vic$minute == 0
vic_forecast_0_0 <- new_timestamp_format_data_forecastdemand_vic[condition1, ]
generate_conditions <- function(data) {
conditions <- lapply(0:23, function(hour_val) {
lapply(c(0, 30), function(minute_val) {
condition <- with(data, hour == hour_val & minute == minute_val)
return(condition)
})
})
return(unlist(conditions, recursive = FALSE))
}
# Call the function with your data frame
conditions <- generate_conditions(new_timestamp_format_data_forecastdemand_vic)
print(conditions)
generate_demand_subsets <- function(dataframe) {
# Create an empty list to store results
vic_demand_list <- list()
# Loop through each hour
for (hour in 0:23) {
# Loop through each minute (0 and 30)
for (minute in c(0, 30)) {
# Define condition for current hour and minute
condition <- dataframe$hour == hour & dataframe$minute == minute
# Subset data based on condition
vic_demand <- dataframe[condition, ]
# Store the result in the list
vic_demand_list[[paste0(hour, "_", minute)]] <- vic_demand
}
}
# Return the list of subsets
return(vic_demand_list)
}
# Call the function with your dataframe
vic_demand_subsets <- generate_demand_subsets(new_timestamp_format_data_demand_vic)
print(vic_demand_subsets[["5_30"]])
generate_subsets <- function(data) {
# Create an empty list to store results
subset_list <- list()
# Loop through each hour
for (hour in 0:23) {
# Loop through each minute (0 and 30)
for (minute in c(0, 30)) {
# Define condition for current hour and minute
condition <- data$hour == hour & data$minute == minute
# Subset data based on condition
subset <- data[condition, ]
# Store the result in the list
subset_list[[paste0(hour, "_", minute)]] <- subset
}
}
# Return the list of subsets
return(subset_list)
}
# Call the function with your dataframe
vic_demand_subsets <- generate_subsets(new_timestamp_format_data_demand_vic)
print(vic_demand_subsets[["5_30"]])
vic_temperature_subsets <- generate_subsets(new_timestamp_format_data_temperature_vic)
head(vic_temperature_subsets[["5_30"]])
# Call the function with the dataframe
vic_forecast_subsets <- generate_subsets(new_timestamp_format_data_forecastdemand_vic)
head(vic_forecast_subsets[["5_30"]])
# sa
sa_forecast_subsets <- generate_subsets(new_timestamp_format_data_forecastdemand_sa)
sa_temperature_subsets <- generate_subsets(new_timestamp_format_data_temperature_sa)
sa_demand_subsets <- generate_subsets(new_timestamp_format_data_demand_sa)
# qld
qld_forecast_subsets <- generate_subsets(new_timestamp_format_data_forecastdemand_qld)
# qld
qld_forecast_subsets <- generate_subsets(new_timestamp_format_data_forecastdemand_qld)
qld_temperature_subsets <- generate_subsets(new_timestamp_format_data_temperature_qld)
qld_demand_subsets <- generate_subsets(new_timestamp_format_data_demand_qld)
# nsw
nsw_forecast_subsets <- generate_subsets(new_timestamp_format_data_forecastdemand_nsw)
nsw_temperature_subsets <- generate_subsets(new_timestamp_format_data_temperature_nsw)
nsw_demand_subsets <- generate_subsets(new_timestamp_format_data_demand_nsw)
nrows(vic_demand_subsets[["5_30"]])
vic_demand_subsets[["5_30"]]
vic_temperature_subsets[["5_30"]]
?inner_join
vic_demand_5_30 <- vic_demand_subsets[["5_30"]]
vic_temperature_5_30 <- vic_temperature_subsets[["5_30"]]
inner_join(x = vic_temperature_5_30, y = vic_demand_5_30), by = c(vic_temperature_5_30$DATETIME = vic_demand_5_30$DATETIME))
inner_join(x = vic_temperature_5_30, y = vic_demand_5_30, by = c(vic_temperature_5_30$DATETIME = vic_demand_5_30$DATETIME))
inner_join(x = vic_temperature_5_30, y = vic_demand_5_30, by = c(vic_temperature_5_30$DATETIME, vic_demand_5_30$DATETIME))
vic_demand_5_30 <- vic_demand_subsets[["5_30"]]
vic_demand_5_30$DATETIME <- as.character(vic_demand_5_30$DATETIME)
vic_temperature_5_30 <- vic_temperature_subsets[["5_30"]]
vic_temperature_5_30$DATETIME <- as.character(vic_temperature_5_30$DATETIME)
inner_join(x = vic_temperature_5_30, y = vic_demand_5_30, by = c(vic_temperature_5_30$DATETIME, vic_demand_5_30$DATETIME))
q()
install.packages("readr")
install.packages("here")
install.packages("ggplot2")
install.packages("tidyverse")
install.packages("lubridate")
install.packages("mgcv")
library(readr)
library(here)
library(ggplot2)
library(tidyverse)
library(tidyverse)
library(lubridate)
library(mgcv)
library(fpp2)
install.packages("fpp2")
library(fpp2)
library(fable)
install.packages("fable")
library(fable)
library(feasts)
# VIC
data_forecastdemand_vic <- read_csv(unzip("../data/Australia/a.zip", files = "a/forecastdemand_vic.csv", exdir = tempdir())[1])
data_temperature_vic <- read_csv(unzip("../data/Australia/d.zip", files = "d/temprature_vic.csv", exdir = tempdir())[1])
data_demand_vic <- read_csv(unzip("../data/Australia/d.zip", files = "d/totaldemand_vic.csv", exdir = tempdir())[1])
# SA
data_forecastdemand_sa <- read_csv(unzip("../data/Australia/b.zip", files = "b/forecastdemand_sa.csv", exdir = tempdir())[1])
data_temperature_sa <- read_csv(unzip("../data/Australia/d.zip", files = "d/temprature_sa.csv", exdir = tempdir())[1])
data_demand_sa <- read_csv(unzip("../data/Australia/d.zip", files = "d/totaldemand_sa.csv", exdir = tempdir())[1])
# QLD
data_forecastdemand_qld <- read_csv(unzip("../data/Australia/c.zip", files = "c/forecastdemand_qld.csv", exdir = tempdir())[1])
data_temperature_qld <- read_csv(unzip("../data/Australia/d.zip", files = "d/temprature_qld.csv", exdir = tempdir())[1])
data_demand_qld <- read_csv(unzip("../data/Australia/d.zip", files = "d/totaldemand_qld.csv", exdir = tempdir())[1])
# NSW
#data_forecastdemand_nsw <- read_csv(here("/Users/josephrobertmelbin/Documents/GitHub/Project2/data/NSW/forecastdemand_nsw.csv"))
data_temperature_nsw <- read_csv(unzip("../data/NSW/temperature_nsw.csv.zip", files = "temperature_nsw.csv", exdir = tempdir())[1])
data_demand_nsw <- read_csv(unzip("../data/NSW/totaldemand_nsw.csv.zip", files = "totaldemand_nsw.csv", exdir = tempdir())[1])
# check for null values
check_for_na <- function(data) {
for (col_index in seq_along(data)) {
has_na <- any(is.na(data[[col_index]]))
cat("Column", col_index, "has NA values:", has_na, "\n")
}
}
# Converts string DATETIME into dttm and creates timestamp columns
wrangle_demand_data <- function(df) {
if ("DATETIME" %in% names(df)) {
df <- df %>%
mutate(DATETIME = dmy_hm(`DATETIME`, tz='AUstralia/Brisbane'),
Year = year(DATETIME),        # Extract year
Month = month(DATETIME),      # Extract month
Day = day(DATETIME),          # Extract day
Hour = hour(DATETIME),        # Extract hour
Minute = minute(DATETIME)) %>%  # Extract minute
mutate(TimeOfDay = Hour + Minute / 60,   # Time of the day (0 - 24)
WeekOfMonth = factor(week(DATETIME) - week(floor_date(DATETIME, "month")) + 1, levels = c(1,2,3,4,5,6)),
DayOfWeek = factor(wday(DATETIME, label=TRUE), levels = c("Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat")))
} else {
warning("DATETIME column not found in the dataframe.")
}
return(df)
}
df_demand_nsw <- wrangle_demand_data(data_demand_nsw)
df_temperature_nsw <- wrangle_demand_data(data_temperature_nsw)
head(de_demand_nsw)
head(df_demand_nsw)
head(df_temperature_nsw)
df_demand_nsw %>%
ggplot(aes(x=DATETIME, y=TOTALDEMAND)) +
geom_line() +
geom_vline(data = data.frame(x = seq(from = floor_date(min(df_demand_nsw$DATETIME), "year"),
to = ceiling_date(max(df_demand_nsw$DATETIME), "year"),
by = "1 year")),
aes(xintercept = as.numeric(x)),
linetype = "dotted", color = "red") +
scale_x_datetime(
date_breaks = '1 year',
date_labels = '%Y'
) +
theme_minimal()
df_demand_nsw_monthly <- df_demand_nsw %>%
group_by(Month, WeekOfMonth, TimeOfDay) %>%
summarise(MeanDemand = mean(TOTALDEMAND)) %>%
ungroup()
df_demand_nsw_monthly <- df_demand_nsw %>%
group_by(Month, WeekOfMonth, TimeOfDay) %>%
summarise(MeanDemand = mean(TOTALDEMAND)) %>%
ungroup()
df_demand_nsw_monthly %>%
ggplot(aes(x = TimeOfDay, y = MeanDemand)) +
geom_line(aes(color = WeekOfMonth)) +
facet_wrap(~ Month, ncol = 3) +
scale_x_continuous(name = "Time of Day", breaks = seq(0, 24, by = 3), labels = function(x) sprintf("%02d:00", x)) +
scale_y_continuous(name = "Mean Total Demand") +
labs(title = "Weekly Pattern of Electricity Demand by Month") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
strip.text.x = element_text(size = 8))
df_demand_nsw_seasonly <- df_demand_nsw %>%
mutate(Season = case_when(
Month %in% c(12, 1, 2) ~ "Summer",
Month %in% c(3, 4, 5) ~ "Autumn",
Month %in% c(6, 7, 8) ~ "Winter",
Month %in% c(9, 10, 11) ~ "Spring",
TRUE ~ NA_character_))
df_demand_nsw_seasonly %>%
ggplot(aes(x = factor(Hour), y = TOTALDEMAND)) +
geom_boxplot(aes(fill=Season)) +
facet_wrap(~Season, scales = "free_y") + # Faceting by season
labs(title = "Electricity Demand by Hour Across Seasons",
x = "Hour of Day",
y = "Total Demand") +
scale_x_discrete(name = "Time of Day", breaks = seq(0, 24, by = 2)) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 1)) # Improve readability of x axis labels
df_demand_nsw_weekly <- df_demand_nsw %>%
group_by(DayOfWeek, TimeOfDay) %>%
summarise(MeanDemand = mean(TOTALDEMAND, na.rm = TRUE))
df_demand_nsw_weekly %>% ggplot(aes(x = TimeOfDay, y = MeanDemand)) +
geom_line(aes(color = DayOfWeek)) +
scale_x_continuous(name = "Time of Day", breaks = seq(0, 24, by = 1), labels = function(x) sprintf("%02d:00", x)) +
scale_y_continuous(name = "Mean Total Demand") +
scale_color_brewer(palette = "Dark2") +
labs(title = "Mean Total Demand by Time of Day and Day of Week") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
df_demand_nsw_daily <- df_demand_nsw %>%
group_by(Month, Day) %>%
summarise(Avg_daily_demand = mean(TOTALDEMAND)) %>%
mutate(DATE = make_date(year=2012, month=Month, day=Day),
MonthName = month(DATE, label=TRUE))
df_demand_nsw_daily %>%
ggplot(aes(x = DATE, y = Avg_daily_demand)) +
geom_line() + # Draw lines between points
geom_point() + # Add points for each data point
geom_smooth() +
scale_x_date(date_breaks = "1 month", date_labels = "%b") + # Customize x-axis labels
labs(x = "Month", y = "Avg demand", title = "Average daily demand") +
theme_minimal() # Use a minimal theme
df_temperature_nsw %>%
ggplot(aes(x=DATETIME, y=TEMPERATURE)) +
geom_line() +
geom_vline(data = data.frame(x = seq(from = floor_date(min(df_temperature_nsw$DATETIME), "year"),
to = ceiling_date(max(df_temperature_nsw$DATETIME), "year"),
by = "1 year")),
aes(xintercept = as.numeric(x)),
linetype = "dotted", color = "red") +
scale_x_datetime(
date_breaks = '1 year',
date_labels = '%Y'
) +
theme_minimal()
install.packages("readr")
install.packages("here")
install.packages("ggplot2")
install.packages("tidyverse")
install.packages("lubridate")
install.packages("mgcv")
install.packages("fpp2")
